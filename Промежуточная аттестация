# Инструкция по написанию текстов в MrakDown

## Выделение текстов

В MarkDown есть несколько различных способов выделить текст. 

Например, Вы можете обрамить слово (или кусок текста) звездочками (*) или нижним подчеркиванием (_) и тогда он будет написан курсивом - *вот так* или _вот так_.

Также вы можете выделить текст полужирным шрифтом, для этого необходимо обрамить текст двойными звездочками (**) или двойными подчеркиванием (__) - **полужирный текст** или __полужирный текст__.

Мы можем комбинировать разные способы выделения полужирным и курсивом. Например, вот так - _Курсивный и одновременно **полужирный текст**_.

## Работа со списками

Списки выбают нумерованными и ненумерованными. Если нам нужен нумерованный список, то мы просто пишем каждый элемент со своим номером на новой строке, а MarkDown сам его красиво оформит. Например, вот так:
1. первый элемент
2. второй элемент
3. третий элемент

Если нам нужны ненумерованные списки, то мы вместо числа (номера элемента) можем поставить +. Например, вот так:
+ Элемент
+ Элемент

## Картинки в тексте

Чтобы добавить картинку в текст необходимо использовать следующий синтаксис - ставим восклицательный знак, потом в квадратных скобках указываем текст, а в круглых - адрес файла с картинкой. Адрес относительный или абсолютный. Например, вот так:
![Oшибка](KOSHak.jpeg)

## Ссылки в текста

Ссылка на [GitHub](https://github.com/)

## Заголовки
Заголовки пишем через # или ##

#GIT

git init (git initiation) с помощью этой команды GIT начнет видеть папку или файл
инициация папки

git status (статус) отображает есть ли изменения которые не были сохранены

git commit (фиксация\сохранить) сохраняет то что не было сохранено до нынешнего моменты (можно написать сообщение\назвние в сохранение командой git commit -m [любые слова])

git add (название файла) GIT добавляет не добавленное до вписания данной команды

git checkout возвращает к нужному обновлению\сохранению\ветви

git log показывает обновления\изменения которые были внесены

git checkout master возвращает к главной ветви

git diff разница сохраненного с нынешним

git branch - количество отвлетвлений и их название

git branch [name] - создание ветви

git merge [name] соеденение 2 веток (а имеено: той в которой вы,и той которую вы написали)

git branch -d (или -D для подтверждения удаления выбранной ветви) [name]

git branch -d [name] удаляет не нужную ветвь

.gitignore (файл в который что напишешь то игнорится) 

# GITHUB
Разница GITHUB и GIT

git - программа которая устанавливается на копмьютер локально и создан Linux.T

github - сайт от майкрософт который помогает работать с другими людьми

cd на (macOS и linux в GIT) это change direction

git remote - для работы из далеко нужно 

git remote (ссылка)  

git branch -M (branchname) - основкая ветка

git remote add (name) (link)

git push - скинуть в инет

git pull - перенести изменнеия с инета в git (локальную сеть,пк)

git clone [https link] - скопировать репозиторий из интернета к тебе в git

Форкнули или сделали форк - сделал полную копию чужого репозитория
репозиторий это просто файл который ты инициируешь
для изменения чужого репозитория с помощью кнопки на сайти GITHUB

1. Делаем форк (fork) интересующего нас репозитория.

2. Мы делаем git clone  для нашей версии этого репозитория. 

3. мы создаем ветку с предлагаемыми изменениями.

4. производим все изменения только в этой ветке. 

5. отправлен эти измения на свой аккаунт (push).

6. в окне на Github появляется возможно отправить pull request.
внешний репозиторий = репозиторий из интернета (чужой)

##Вывод

GIT интересный!

+ pull request  ->